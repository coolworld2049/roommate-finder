create type
  gender as enum ('male', 'female', 'unknown');

create type
  share_with as enum ('male', 'female', 'no_one', 'anyone');

create type
  property_type as enum ('apartment', 'house', 'townhouse', 'loft', 'studio');

create type
  stay_duration as enum ('semester', 'two_semester', 'flexible');

create type
  room_type as enum ('private', 'shared');

create type
  room_size as enum ('small', 'medium', 'large');

create type
  advertising_as as enum ('tenant', 'owner', 'live_in_landlord');

create type
  ad_status as enum ('active', 'inactive', 'paused');

create type
  category_type as enum ('property', 'room', 'roommate');

create table
  if not exists interest_areas (
    id bigint generated by default as identity,
    name text not null,
    icon_svg text,
    created_at timestamptz default now(),
    primary key(id),
    unique(name)
  );

create table
  if not exists profiles (
    id uuid references auth.users(id) not null,
    full_name text not null,
    dob date not null,
    gender gender not null,
    avatar text,
    bio text,
    interest_areas text [],
    created_at timestamptz default now(),
    primary key(id)
  );

create table
  if not exists profile_socials (
    id bigint generated by default as identity,
    profile_id uuid references profiles(id) on delete cascade not null,
    telegram text,
    vk text,
    primary key(id),
    unique(profile_id)
  );

create table
  if not exists higher_education_specialties (
    id bigint generated by default as identity,
    code text not null,
    area text not null,
    qualification text not null,
    primary key(id),
    unique(code)
  );

create table
  if not exists profile_universities (
    id bigint generated by default as identity,
    profile_id uuid references profiles(id) on delete cascade not null,
    university_name text not null,
    university_address text not null,
    geo_lat numeric(14, 11),
    geo_lon numeric(14, 11),
    graduation_year int not null,
    specialty_id bigint references higher_education_specialties(id) on delete cascade,
    created_at timestamptz default now(),
    primary key(id),
    unique(profile_id)
  );

create table
  if not exists preferences (
    id bigint generated by default as identity,
    category category_type not null,
    name text not null,
    options text [],
    created_at timestamptz default now(),
    primary key(id),
    unique(name)
  );

create table
  if not exists roommates (
    id bigint generated by default as identity,
    profile_id uuid references profiles(id) on delete cascade not null,
    title text not null,
    description text,
    address text not null,
    address_data jsonb,
    geo_lat numeric(14, 11),
    geo_lon numeric(14, 11),
    move_in_date date not null,
    budget_month int not null,
    rooms_number int [] check (array_length(rooms_number, 1) = 2),
    tenants_number int [] check (array_length(tenants_number, 1) = 2),
    tenants_age int [] check (array_length(tenants_age, 1) = 2),
    status ad_status not null default 'active' :: ad_status,
    created_at timestamptz default now(),
    primary key(id),
    unique(profile_id)
  );

create table
  if not exists roommate_in_preferences (
    id bigint generated by default as identity,
    roommate_id bigint references roommates(id) on delete cascade not null,
    preference_id bigint references preferences(id) on delete cascade not null,
    value text not null,
    created_at timestamptz default now(),
    primary key(id),
    unique(roommate_id, preference_id)
  );

create table
  if not exists properties (
    id bigint generated by default as identity,
    profile_id uuid references profiles(id) on delete cascade not null,
    title text not null,
    description text,
    images text [],
    address text not null,
    geo_lat numeric(14, 11),
    geo_lon numeric(14, 11),
    address_data jsonb,
    nearest_metro_station jsonb,
    property_type property_type not null,
    bathrooms_number int not null,
    rent_price_month int not null,
    stay_duration stay_duration not null,
    bills_included boolean not null default false,
    deposit_amount int,
    advertising_as advertising_as not null,
    status ad_status not null default 'active' :: ad_status,
    created_at timestamptz default now(),
    primary key(id),
    unique(profile_id)
  );

create table
  if not exists property_in_preferences (
    id bigint generated by default as identity,
    property_id bigint references properties(id) on delete cascade not null,
    preference_id bigint references preferences(id) on delete cascade not null,
    value text not null,
    created_at timestamptz default now(),
    primary key(id),
    unique(property_id, preference_id)
  );

create table
  if not exists amenities (
    id bigint generated by default as identity,
    category category_type not null,
    name text not null,
    icon_svg text,
    created_at timestamptz default now(),
    primary key(id)
  );

create table
  if not exists property_amenities (
    id bigint generated by default as identity,
    property_id bigint references properties(id) on delete cascade not null,
    amenity_id bigint references amenities(id) on delete cascade not null,
    value boolean not null default false,
    created_at timestamptz default now(),
    primary key(id),
    unique(property_id, amenity_id)
  );

create table
  if not exists rooms (
    id bigint generated by default as identity,
    property_id bigint references properties(id) on delete cascade not null,
    title text not null,
    description text,
    images text [],
    room_type room_type not null,
    room_size room_size,
    status ad_status not null default 'active' :: ad_status,
    available_from date,
    created_at timestamptz default now(),
    primary key(id)
  );

create table
  if not exists room_tenants (
    id bigint generated by default as identity,
    room_id bigint references rooms(id) on delete cascade not null,
    full_name text not null,
    age smallint not null,
    gender gender not null,
    avatar text,
    bio text,
    created_at timestamptz default now(),
    primary key(id)
  );

create table
  if not exists room_amenities (
    id bigint generated by default as identity,
    room_id bigint references rooms(id) on delete cascade not null,
    amenity_id bigint references amenities(id) on delete cascade not null,
    value boolean not null default false,
    created_at timestamptz default now(),
    primary key(id),
    unique(room_id, amenity_id)
  );

create table
  if not exists recommendations (
    id bigint generated by default as identity,
    property_id bigint references properties(id) on delete cascade not null,
    roommate_id bigint references roommates(id) on delete cascade not null,
    score float not null,
    created_at timestamptz default now(),
    updated_at timestamptz default current_timestamp not null,
    primary key(id),
    unique(property_id, roommate_id)
  );

create
or replace trigger recommendations_moddatetime before
update
  on recommendations for each row
execute
  procedure moddatetime (updated_at);

create materialized view
  if not exists property_room_tenant_summary as
select
  p.id as property_id,
  p.profile_id,
  count(distinct r.id) as rooms_number,
  count(rt.id) as tenants_number,
  min(rt.age) as tenants_age_min,
  max(rt.age) as tenants_age_max,
  round(avg(rt.age)) :: int as tenants_age_avg,
  min(r.available_from) as available_from_min,
  max(r.available_from) as available_from_max,
  case
    when count(rt.id) = 0 then p.rent_price_month
    else p.rent_price_month / nullif(count(rt.id), 0)
  end as rent_per_tenant,
  sum(
    case
      when rt.gender = 'female' then 1
      else 0
    end
  ) as gender_female_count,
  sum(
    case
      when rt.gender = 'male' then 1
      else 0
    end
  ) as gender_male_count
from
  properties p
  left join rooms r on p.id = r.property_id
  and r.status != 'inactive' :: ad_status
  left join room_tenants rt on r.id = rt.room_id
where
  p.status = 'active' :: ad_status
group by
  p.id,
  p.profile_id
order by
  p.id;

create unique index on property_room_tenant_summary (property_id);

create
or replace function refresh_property_room_tenant_summary() returns trigger as $$
begin
  refresh materialized view concurrently property_room_tenant_summary;
  return null;
end;
$$ language plpgsql security definer
set
  search_path = public;

create
or replace trigger refresh_property_room_tenant_summary_trigger
after
insert
  or
update
  or
delete
  on properties for each statement
execute
  function refresh_property_room_tenant_summary();

create
or replace trigger refresh_property_room_tenant_summary_trigger
after
insert
  or
update
  or
delete
  on rooms for each statement
execute
  function refresh_property_room_tenant_summary();

create
or replace trigger refresh_property_room_tenant_summary_trigger
after
insert
  or
update
  or
delete
  on room_tenants for each statement
execute
  function refresh_property_room_tenant_summary();

create
or replace view property_recommendations_view as
with
  ranked_recommendations as (
    select
      r.roommate_id,
      r.property_id,
      r.score,
      r.updated_at,
      row_number() over (
        partition by r.roommate_id
        order by
          r.score desc
      ) as rn
    from
      recommendations r
    order by
      r.score desc,
      r.updated_at desc
  )
select
  property_id,
  json_agg(
    json_build_object('roommate_id', roommate_id, 'score', score)
  ) as recommendations
from
  ranked_recommendations
where
  rn <= 10
group by
  property_id
order by
  property_id;

create
or replace view roommate_recommendations_view as
with
  ranked_recommendations as (
    select
      r.roommate_id,
      r.property_id,
      r.score,
      r.updated_at,
      row_number() over (
        partition by r.roommate_id
        order by
          r.score desc
      ) as rn
    from
      recommendations r
    order by
      r.score desc,
      r.updated_at desc
  )
select
  roommate_id,
  json_agg(
    json_build_object('property_id', property_id, 'score', score)
  ) as recommendations
from
  ranked_recommendations
where
  rn <= 10
group by
  roommate_id
order by
  roommate_id;

create
or replace view universities as
select
  university_name,
  university_address,
  geo_lat,
  geo_lon
from
  profile_universities
group by university_name,university_address,geo_lat,geo_lon